///////////// Include this file into every script /////////////
// This file is necessary for basic instuctions to work
// Do not edit this file
// Make sure this file can be included when it's in a different subfolder for your application

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////// Pyrois base instructions ////////////////

/*
Copyright (c) 2017 Michal Kuch√°rik (Tau)

All rights reserved.

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

defineInstruction(none, 0);

defineInstruction(jmp, 1, int);
defineInstruction(jf, 2, int, int);
defineInstruction(jt, 3, int, int);

defineInstruction(set, 4, void, void, void);
defineInstruction(getsadr, 5, void, void, void);
defineInstruction(getaadr, 6, void, void, int);
defineInstruction(getsval, 7, void, void, void);
defineInstruction(getaval, 8, void, void, int);
defineInstruction(setstruc, 9, void);

defineInstruction(add, 10, void, void, void);
defineInstruction(sub, 11, void, void, void);
defineInstruction(mul, 12, void, void, void);
defineInstruction(div, 13, void, void, void);
defineInstruction(pow, 14, void, void, void);
defineInstruction(mod, 15, void, void, void);

defineInstruction(and, 16, void, void, void);
defineInstruction(or, 17, void, void, void);
defineInstruction(not, 18, void, void);

defineInstruction(equal, 19, void, void, void);
defineInstruction(lesser, 20, void, void, void);
defineInstruction(greater, 21, void, void, void);

defineInstruction(call, 22, int);
// never inside script
//defineInstruction(outerCall, 23, int);
defineInstruction(setReturnVariable, 24, void);
defineInstruction(function, 25, int);
defineInstruction(return, 26, void);
defineInstruction(returnVoid, 27);
defineInstruction(end, 28);
defineInstruction(inc, 29, int);
defineInstruction(dec, 30, int);

////////////////////////////////////////////////////

defineStruct(vec2, 2)
{
	defineStructVariable(vec2, float, x);
	defineStructVariable(vec2, float, y);
}

defineStruct(vec3, 3)
{
	defineStructVariable(vec3, float, x);
	defineStructVariable(vec3, float, y);
	defineStructVariable(vec3, float, z);
}

defineStruct(vec4, 4)
{
	defineStructVariable(vec4, float, x);
	defineStructVariable(vec4, float, y);
	defineStructVariable(vec4, float, z);
	defineStructVariable(vec4, float, w);
}

defineStruct(mat2x2, 5)
{
	defineStructVariable(mat2x2, vec2, r0);
	defineStructVariable(mat2x2, vec2, r1);
}

defineStruct(mat3x3, 6)
{
	defineStructVariable(mat3x3, vec3, r0);
	defineStructVariable(mat3x3, vec3, r1);
	defineStructVariable(mat3x3, vec3, r2);
}

defineStruct(mat4x4, 7)
{
	defineStructVariable(mat4x4, vec4, r0);
	defineStructVariable(mat4x4, vec4, r1);
	defineStructVariable(mat4x4, vec4, r2);
	defineStructVariable(mat4x4, vec4, r3);
}

defineInstruction(sinoi, 900, float, float);
defineInstruction(cosoi, 901, float, float);

defineFunction(sin, float, float:_in_sinus_in_param_)
{
	sinoi(_in_sinus_in_param_, _in_sinus_in_param_);
	return(_in_sinus_in_param_);
}

defineFunction(cos, float, float:_in_cosinus_in_param_)
{
	cosoi(_in_cosinus_in_param_, _in_cosinus_in_param_);
	return(_in_cosinus_in_param_);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////// Soviet Republic instructions ////////////////


// set money
defineInstruction(Money_SetRUB, 1000, int);
defineInstruction(Money_SetUSD, 1001, int);

// get money
defineInstruction(Money_GetRUB, 1002, int);
defineInstruction(Money_GetUSD, 1003, int);

// adds money for player
defineInstruction(Money_AddRUB, 1005, int);
defineInstruction(Money_AddUSD, 1006, int);

// same as clicking on a building
defineInstruction(Window_OpenBuildingWindow, 1007, int);

// get index of topmost window, or -1 if no windows are open
defineInstruction(Window_GetLastWindow, 1008, int);

// set new screen position for selected window
defineInstruction(Window_SetWindowPosition, 1009, int, float, float);

// opens a debug window and displays text, max 250 characters
defineInstruction(Window_ShowText, 1012, string);

// get a random integer number
defineInstruction(Random, 1010, int);

// get game window size
defineInstruction(GetScreenSize, 1011, int, int);

// first parameter is output height, second is input position
defineInstruction(Terrain_GetHeight, 1013, float, vec3);

// create a small box in the world (can serve as a marker)
defineInstruction(ScreenMark_Create, 1014, vec3);
// deletes all screen mark boxes
defineInstruction(ScreenMark_ClearAll, 1015);

// starts a new script, script has to be in the same directory as current script
defineInstruction(Script_StartNew, 1016, string);
// check if script with a name exists, input name, output char 0/1
defineInstruction(Script_Exists, 1032, string, char);

// how many script instructions are executed per second <1, 10000>
defineInstruction(Script_SetUpdateFrequency, 1017, int);
defineInstruction(Script_GetUpdateFrequency, 1029, int);

// in case of in-game performance heavy functions, you can use this instruction
// to reset the update time and execute these functions only once per frame
defineInstruction(Script_ResetUpdateTime, 1024);

// scripts are by default not continuous, meaning they are deleted once they reach the last line
// by setting this to 1, your script will reset after it reaches the last line
defineInstruction(Script_SetContinuous, 1033, int);

// destroy a script by name
defineInstruction(Script_DestroyByName, 1034, string);

// similar to Script_SetContinuous, if this is set to 1 script will be reset after the last line
// however, if this is set to 1, the entire script will be executed in 1 frame
// be careful with this instruction as it can freeze the game; see freeze.txt example for more
defineInstruction(Script_ExecutionEntireAtOnce, 1035, int);

// if Script_ExecutionEntireAtOnce is set to 1, entire script will be executed after every x seconds
// default value for this is 1 second
defineInstruction(Script_ExecutionEntireAtOnceCD, 1050, float);

// get current script time in seconds
// get amount of seconds since this script was launched, this time is paused while game is paused
// and the speed is doulbed if the game runs at 2x speed
defineInstruction(Script_GetTime, 1018, float);

// all instructions inside of critical section are executed in a single frame
// be careful with this instruction as it can freeze the game; see freeze.txt example for more
defineInstruction(Script_EnterCriticalSection, 1036);
defineInstruction(Script_LeaveCriticalSection, 1037);

// pause script execution for x seconds
// does nothing if Script_ExecutionEntireAtOnce is 1 or if inside Script_EnterCriticalSection
defineInstruction(Script_Sleep, 1031, float);

// input: identifier, text
defineInstruction(Objectives_CreateNewString, 1020, string, string);
// input: identifier, lang id
defineInstruction(Objectives_CreateNewLangID, 1021, string, int);

// input: identifier, required value, image file name
defineInstruction(Objective_AddRequirement, 1022, string, float, string);

// input: identifier, index, value
defineInstruction(Objective_UpdateRequirement, 1023, string, int, float);

// input: identifier, index; set value to required value
defineInstruction(Objective_UpdateRequirementToTarget, 1027, string, int);

// input: identifier
defineInstruction(Objective_SetComplete, 1028, string);
// remove by identifier
defineInstruction(Objective_Remove, 1030, string);

// deletes all objectives
// note: objectives all global and shared between all scritps
// if you have multiple scritps running this will delete objectives for all of them
defineInstruction(Objectives_ClearAll, 1019);


// get date as day of year 0-364 and year
defineInstruction(Date_GetCurrentDate_D365Y, 1025, int, int);
// get date as day, month, year
defineInstruction(Date_GetCurrentDate_DMY, 1026, int, int, int);

// set date as day of year 0-364 and year
defineInstruction(Date_SetCurrentDate_D365Y, 1040, int, int);

// create a notification message
// input: caption lang id, text lang id, image file name, position in world
defineInstruction(Notification_CreateNewLangIDPic, 1053, int, int, string, vec3);
// input: caption, text, image file name, position in world
defineInstruction(Notification_CreateNewStringPic, 1054, string, string, string, vec3);


//////////////////////////////////////////
// following instructions can allow or prevent certain actions
// input for int is 0/1 to prevent/allow; -1 leave original state

// Allow blueprint purchase, allow use of purchased blueprints, blueprint purchase price multiplier
defineInstruction(Permissions_BlueprintAllowUSD, 1042, int, int, float);
defineInstruction(Permissions_BlueprintAllowRUB, 1043, int, int, float);

// Allow delivery of resources, Allow purchase of resources only on zoll posts, purchase price multiplier
defineInstruction(Permissions_ResourcesAllowPurchaseUSD, 1044, int, int, float);
defineInstruction(Permissions_ResourcesAllowPurchaseRUB, 1045, int, int, float);

// allow immigration, immigran purchase price multiplier
defineInstruction(Permissions_ImmigrantAllowPurchaseUSD, 1046, int, float);
defineInstruction(Permissions_ImmigrantAllowPurchaseRUB, 1047, int, float);

// allow selling of resources on zoll posts, allow new vehicle sell on zoll posts, receive money when trashing vehicles
defineInstruction(Permissions_ResourcesAllowSellUSD, 1048, int, int, int);
defineInstruction(Permissions_ResourcesAllowSellRUB, 1049, int, int, int);

// allow purchase of vehicles: road, rail, ships, airplanes+heli, cabins
defineInstruction(Permissions_VehicleAllowPurchaseUSD, 1051, int, int, int, int, int);
defineInstruction(Permissions_VehicleAllowPurchaseRUB, 1052, int, int, int, int, int);

//////////////////////////////////////////
//////////////////////////////////////////
// BUILDINGS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Building, 100)
{

	defineStructInstruction(Building, GetDataByIndex, 10000, int);   // get in-game building data by index
	defineStructInstruction(Building, GetDataByTag, 10001, string, int);  // get in-game building data by custom tag
	 
	
	


	defineStructVariable(Building, vec3, vPosition);
	defineStructVariable(Building, int, nType);				//check constants - BUILDINGTYPE
	defineStructVariable(Building, int, nSubType);			//check constants - BUILDINGSUBTYPE
	
	defineStructVariable(Building, int, nMineType);			//check constants - SOVIET_MINE_RESOURCE
	defineStructVariable(Building, float, fMineQualityOfSource);
	
	defineStructVariable(Building, float, fFieldSeeding);
	defineStructVariable(Building, float, fFieldGrowing);
	defineStructVariable(Building, float, fFieldHarvesting);
	
	defineStructVariable(Building, float, fPercFinished);
	defineStructVariable(Building, char, bDemolated);
	
	defineStructVariable(Building, float, fCurrentProduction);
	
	defineStructVariable(Building, int, nWalkingBuildingNum);
	
	defineStructVariable(Building, int, nParkingBuildingNum);
	
	defineStructVariable(Building, int, nVehiclesWorkingNum);
	
	defineStructVariable(Building, int, nWorkersNum);
	
	defineStructVariable(Building, int, nWorkersSecondaryNum);
	
	defineStructVariable(Building, char, bVisible);
	defineStructVariable(Building, float, fVisibleCameraDistance);
	
	defineStructVariable(Building, float, fPollution_AroundBuildingCurrent);
	defineStructVariable(Building, float, fPollution_RadioactivityAroundBuildingCurrent);
	defineStructVariable(Building, float, fHeating_CurrentTemperature);
	defineStructVariable(Building, float, fHeating_WaterTankTemperatureCore);
	defineStructVariable(Building, float, fHeating_WaterTankTemperatureDisplay);
	defineStructVariable(Building, float, fHeating_WaterTankCapacity);
	
	defineStructVariable(Building, float, fEletric_Voltage);
	defineStructVariable(Building, float, fEletric_Wattage);
	defineStructVariable(Building, float, fEletric_CurcuitBreakerCapacity);

}


//functions
///////////////////////////

// number of all buildings in game, including zoll posts
defineInstruction(Building_GetNumberOfBuildings, 11001, int);

defineInstruction(Building_StartFire, 11002, int);

// set custom tag for selected building
defineInstruction(Building_SetTag, 11003, string, int);
defineInstruction(Building_GetByTag, 11004, string, int);

// in m_Building id, in WalkingBuilding id, out WalkingBuilding id in m_Building
defineInstruction(Building_WalkingBuilding_GetID, 11005, int, int, int);
defineInstruction(Building_WalkingBuilding_GetDistance, 11006, int, int, float);

// in m_Building id, in ParkingBuilding id, out ParkingBuilding id in m_Building
defineInstruction(Building_ParkingBuilding_GetID, 11007, int, int, int);
defineInstruction(Building_ParkingBuilding_GetDistance, 11008, int, int, float);

defineInstruction(Building_Workers_GetID, 11009, int, int, int);

defineInstruction(Building_WorkersSecondary_GetID, 11010, int, int, int);

defineInstruction(Building_VehiclesWorking_GetID, 11011, int, int, int);

defineInstruction(Building_Demolish, 11012, int);






//////////////////////////////////////////
//////////////////////////////////////////
// VEHICLES
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Vehicle, 101)
{
	defineStructInstruction(Vehicle, GetDataByIndex, 20000, int);   // get in-game vehicle data by index
	defineStructInstruction(Vehicle, GetDataByTag, 20001, string, int);  // get in-game vehicle data by custom tag
	
	
	
	
	
	defineStructVariable(Vehicle, vec3, vPosition);
	defineStructVariable(Vehicle, int, nVehicleType);		// VEHICLETYPE
	defineStructArray(Vehicle, int[3], nSkill);				// VEHICLESKILL
	
	defineStructVariable(Vehicle, int, nTransportType);		// RESOURCE_TRANSPORT_TYPE
	defineStructVariable(Vehicle, float, fResourceCapacity);
	
	defineStructVariable(Vehicle, float, fType_EnginePower);
	defineStructVariable(Vehicle, char, bType_MovementElectric);
	defineStructVariable(Vehicle, float, fType_TakeOffDistance);
	defineStructVariable(Vehicle, float, fType_FuelCapacity);
	
	defineStructVariable(Vehicle, int, nPersonalCar_OwnerID);
	
	defineStructVariable(Vehicle, int, nTrain_ParentID);
	defineStructVariable(Vehicle, int, nTrain_VagonsNum);
	defineStructVariable(Vehicle, int, nTrain_EntireTrainWorkersNum);
	defineStructVariable(Vehicle, int, nWorkers);
	
	defineStructVariable(Vehicle, int, nBuilding_CurrentID);
	defineStructVariable(Vehicle, int, nBuilding_StationBuildingID);
	defineStructVariable(Vehicle, int, nBuilding_StationBuildingTargetID);
	defineStructVariable(Vehicle, int, nBuilding_HomeWorkplaceID);
	defineStructVariable(Vehicle, int, nBuilding_MovingInsideBuilding);
	
	defineStructVariable(Vehicle, char, bFuel_NoFuel);
	defineStructVariable(Vehicle, float, fFuel_Current);
	
	defineStructVariable(Vehicle, int, nCarry_OnOtherVehicleID);
	defineStructVariable(Vehicle, int, nCarry_OtherVehiclesNum);
	defineStructVariable(Vehicle, char, bCarry_MustBeLoadedToVehicle);
	defineStructVariable(Vehicle, char, bCarry_CanBeLoadedToVehicle);
	defineStructVariable(Vehicle, int, nSchedule_StationsGetNum);
	defineStructVariable(Vehicle, int, nSchedule_StationCurrent);
}

//functions
///////////////////////////

defineInstruction(Vehicle_GetNumberOfVehicles, 21001, int);

defineInstruction(Vehicle_SetTag, 21003, string, int);
defineInstruction(Vehicle_GetByTag, 21004, string, int);

//func: Vehicle_Schedule_StationGetBuildingID();  m_MovementBuilding[ID]->SerializationIndex
defineInstruction(Vehicle_Schedule_StationGetBuildingID, 21005, int, int, int);

//func: Vehicle_Schedule_StationIsWaypoint()   return (m_MovementStationDescription[ID].HubWaypoint)
defineInstruction(Vehicle_Schedule_StationIsWaypoint, 21006, int, int, int);

//func: Vehicle_Schedule_AddNewStop(int a_BuildingID, int a_Order)  MovementAddBuildingWaypoint()
defineInstruction(Vehicle_Schedule_AddNewStop, 21007, int, int, int);

//func: Vehicle_Schedule_RemoveStop(int a_Order)   MovementRemoveBuildingWaypoint();
defineInstruction(Vehicle_Schedule_RemoveStop, 21008, int, int);

//func Vehicle_Sell(int a_Sell, int a_ExportRUB, int a_ExportUSD)  SOVIET_GAME::Vehicle_Erase
defineInstruction(Vehicle_Sell, 21009, int, int, int);

//func: Vehicle_Train_GetVagonID - m_TrainVehicles[ID]->SerializationIndex
defineInstruction(Vehicle_Train_GetVagonID, 21010, int, int, int);

//func: Vehicle_Train_GetEntireTrainWorkerID
defineInstruction(Vehicle_Train_GetEntireTrainWorkerID, 21011, int, int, int);

//func Vehicle_Workers_GetID
defineInstruction(Vehicle_Workers_GetID, 21012, int, int, int);

//func:  Vehicle_Carry_GetVehicleID - m_CargoVehicles[ID]->SerializationIndex
defineInstruction(Vehicle_Carry_GetVehicleID, 21013, int, int, int);



//////////////////////////////////////////
//////////////////////////////////////////
// WORKERS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Person, 102)
{
	defineStructInstruction(Person, GetDataByIndex, 30000, int);   // get in-game person data by index
	defineStructInstruction(Person, GetDataByTag, 30001, string, int);  // get in-game person data by custom tag
	
	

	defineStructVariable(Person, float, fStatusHappiness);
	defineStructVariable(Person, float, fStatusFood);
	defineStructVariable(Person, float, fStatusHealth);
	defineStructVariable(Person, float, fStatusSoviet);
	defineStructVariable(Person, float, fStatusAlcohol);
	defineStructVariable(Person, float, fStatusCulture);
	defineStructVariable(Person, float, fStatusSport);
	defineStructVariable(Person, float, fStatusReligion);
	defineStructVariable(Person, float, fStatusClothing);
	defineStructVariable(Person, float, fStatusElectronic);
	defineStructVariable(Person, float, fStatusCrime);
	
	defineStructVariable(Person, vec3, vPosition);
	
	// 0 - not a tourist, 1 - soviet, 2 - western
	defineStructVariable(Person, int, nTouristFlag);
	
	defineStructVariable(Person, float, fAge);
	defineStructVariable(Person, float, fEducation);
	defineStructVariable(Person, char, bIsHome);
	defineStructVariable(Person, char, bIsUnemployed);
	defineStructVariable(Person, char, bIsUnemployedDueKids);
}

//functions
///////////////////////////

// set custom tag
defineInstruction(Person_SetTag, 31001, string, int);
defineInstruction(Person_GetByTag, 31002, string, int);

// person index, status index, value 0-1
// status index starts with fStatusHappiness at 0, fStatusFood at 1, ...
defineInstruction(Person_SetStatus, 31003, int, int, float);

defineInstruction(Person_SetAge, 31004, int, float);
// education 0-3; <0, 1) no education; <1, 2) basic education; <2, 3) high education
defineInstruction(Person_SetEducation, 31005, int, float);




//////////////////////////////////////////
//////////////////////////////////////////
// NAMEPOINTS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Namepoint, 103)
{
	defineStructInstruction(Namepoint, GetDataByIndex, 40000, int);   // get in-game Namepoint data by index
	defineStructInstruction(Namepoint, GetDatabyTag, 40001, string, int);  // get in-game Namepoint data by custom tag
	
	

	defineStructVariable(Namepoint, vec3, vPosition);
	defineStructVariable(Namepoint, int, nBuildingNum);
}

//functions
///////////////////////////

// set custom tag
defineInstruction(Namepoint_SetTag, 41001, string, int);
defineInstruction(Namepoint_GetByTag, 41002, string, int);




//////////////////////////////////////////
//////////////////////////////////////////
// RESOURCES
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Resources, 104)
{
	defineStructVariable(Resources, float, workers);
	defineStructVariable(Resources, float, eletric);
	defineStructVariable(Resources, float, vehicles);
	defineStructVariable(Resources, float, trains);
	defineStructVariable(Resources, float, heat);
	defineStructVariable(Resources, float, gravel);
	defineStructVariable(Resources, float, rawgravel);
	defineStructVariable(Resources, float, plants);
	defineStructVariable(Resources, float, steel);
	defineStructVariable(Resources, float, aluminium);
	defineStructVariable(Resources, float, prefabpanels);
	defineStructVariable(Resources, float, bricks);
	defineStructVariable(Resources, float, wood);
	defineStructVariable(Resources, float, oil);
	defineStructVariable(Resources, float, chemicals);
	defineStructVariable(Resources, float, coal);
	defineStructVariable(Resources, float, rawcoal);
	defineStructVariable(Resources, float, iron);
	defineStructVariable(Resources, float, rawiron);
	defineStructVariable(Resources, float, bauxite);
	defineStructVariable(Resources, float, rawbauxite);
	defineStructVariable(Resources, float, bitumen);
	defineStructVariable(Resources, float, boards);
	defineStructVariable(Resources, float, uranium);
	defineStructVariable(Resources, float, yellowcake);
	defineStructVariable(Resources, float, uf6);
	defineStructVariable(Resources, float, nuclearfuel);
	defineStructVariable(Resources, float, nuclearfuelburned);
	defineStructVariable(Resources, float, fuel);
	defineStructVariable(Resources, float, fabric);
	defineStructVariable(Resources, float, alcohol);
	defineStructVariable(Resources, float, cement);
	defineStructVariable(Resources, float, alumina);
	defineStructVariable(Resources, float, food);
	defineStructVariable(Resources, float, clothes);
	defineStructVariable(Resources, float, meat);
	defineStructVariable(Resources, float, livestock);
	defineStructVariable(Resources, float, asphalt);
	defineStructVariable(Resources, float, concrete);
	defineStructVariable(Resources, float, ecomponents);
	defineStructVariable(Resources, float, mcomponents);
	defineStructVariable(Resources, float, plastics);
	defineStructVariable(Resources, float, eletronics);
	defineStructVariable(Resources, float, _Resources_reserved_0_);
	defineStructVariable(Resources, float, _Resources_reserved_1_);
	defineStructVariable(Resources, float, _Resources_reserved_2_);
	defineStructVariable(Resources, float, _Resources_reserved_3_);
	defineStructVariable(Resources, float, _Resources_reserved_4_);
	defineStructVariable(Resources, float, _Resources_reserved_5_);
	defineStructVariable(Resources, float, _Resources_reserved_6_);
	defineStructVariable(Resources, float, _Resources_reserved_7_);
	defineStructVariable(Resources, float, _Resources_reserved_8_);
	defineStructVariable(Resources, float, _Resources_reserved_9_);
	defineStructVariable(Resources, float, _Resources_reserved_10_);
	defineStructVariable(Resources, float, _Resources_reserved_11_);
	defineStructVariable(Resources, float, _Resources_reserved_12_);
	defineStructVariable(Resources, float, _Resources_reserved_13_);
	defineStructVariable(Resources, float, _Resources_reserved_14_);
	defineStructVariable(Resources, float, _Resources_reserved_15_);
	defineStructVariable(Resources, float, _Resources_reserved_16_);
	defineStructVariable(Resources, float, _Resources_reserved_17_);
	defineStructVariable(Resources, float, _Resources_reserved_18_);
	defineStructVariable(Resources, float, _Resources_reserved_19_);
	
	defineStructInstruction(Resources, GetFromBuilding, 50000, int);
	defineStructInstruction(Resources, GetFromVehicle, 50001, int);
	
	defineStructInstruction(Resources, AddFromBuilding, 50002, int);
	defineStructInstruction(Resources, AddFromVehicle, 50003, int);
	
	defineStructInstruction(Resources, GetCapacityFromBuilding, 50009, int);
	defineStructInstruction(Resources, AddCapacityFromBuilding, 50010, int);
	
	defineStructInstruction(Resources, GetProductionFromBuilding, 50013, int);
	defineStructInstruction(Resources, GetConsumptionFromBuilding, 50014, int);
	
	// in tag, out success/fail
	
	defineStructInstruction(Resources, GetFromBuildingByTag, 50005, string, int);
	defineStructInstruction(Resources, GetFromVehicleByTag, 50006, string, int);
	
	defineStructInstruction(Resources, AddFromBuildingByTag, 50007, string, int);
	defineStructInstruction(Resources, AddFromVehicleByTag, 50008, string, int);
	
	defineStructInstruction(Resources, GetCapacityFromBuildingByTag, 50011, string, int);
	defineStructInstruction(Resources, AddCapacityFromBuildingByTag, 50012, string, int);
	
	defineStructInstruction(Resources, GetProductionFromBuildingByTag, 50015, string, int);
	defineStructInstruction(Resources, GetConsumptionFromBuildingByTag, 50016, string, int);
	
	defineStructInstruction(Resources, ResetAmounts, 50004);
}

//functions
///////////////////////////






defineStruct(StatRecord, 105)
{
	defineStructVariable(StatRecord, Resources, ImportTonsRUB);
	defineStructVariable(StatRecord, Resources, ImportValueRUB);
	
	defineStructVariable(StatRecord, Resources, ImportTonsUSD);
	defineStructVariable(StatRecord, Resources, ImportValueUSD);
	
	defineStructVariable(StatRecord, Resources, ExportTonsRUB);
	defineStructVariable(StatRecord, Resources, ExportValueRUB);
	
	defineStructVariable(StatRecord, Resources, ExportTonsUSD);
	defineStructVariable(StatRecord, Resources, ExportValueUSD);
	
	defineStructVariable(StatRecord, Resources, SpendConstruction);
	defineStructVariable(StatRecord, Resources, SpendFactories);
	defineStructVariable(StatRecord, Resources, SpendShops);
	defineStructVariable(StatRecord, Resources, SpendVehicles);
	
	defineStructVariable(StatRecord, Resources, ResourcesProduced);
	
	defineStructVariable(StatRecord, float, Vehicles_ImportUSD);
	defineStructVariable(StatRecord, float, Vehicles_ImportRUB);
	
	defineStructVariable(StatRecord, float, Vehicles_ExportUSD);
	defineStructVariable(StatRecord, float, Vehicles_ExportRUB);
	
	defineStructVariable(StatRecord, int, Citizens_Born);
	defineStructVariable(StatRecord, int, Citizens_Dead);
	defineStructVariable(StatRecord, int, Citizens_Escaped);
	defineStructVariable(StatRecord, int, Citizens_ImigrantSoviet);
	defineStructVariable(StatRecord, int, Citizens_ImigrantAfrica);
	
	defineStructVariable(StatRecord, int, Tourism_ToursitGeneratedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitGeneratedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitEnteredUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitEnteredRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitEndedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitEndedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitReturnedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitReturnedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitDiedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitDiedRUB);

	defineStructVariable(StatRecord, float, Tourism_ToursitScoreUSD);
	defineStructVariable(StatRecord, float, Tourism_ToursitScoreRUB);

	defineStructArray(StatRecord, float[16], Tourism_SpendUSD);
	defineStructArray(StatRecord, float[16], Tourism_SpendRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendShopsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendShopsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendPubsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendPubsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendCinemasUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendCinemasRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendSportUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendSportRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendHotelsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendHotelsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendRidesUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendRidesRUB);
	
	// ------
	
	defineStructInstruction(StatRecord, GetPresent, 60000);
	
	// day month year
	defineStructInstruction(StatRecord, GetFromPresentToDate_DMY, 60001, int, int, int);
	
	// 365, day year
	defineStructInstruction(StatRecord, GetFromPresentToDate_D365Y, 60002, int, int);
	
	// day month year, day month year
	defineStructInstruction(StatRecord, GetFromDateToDate_DMY, 60003, int, int, int, int, int, int);
	
	// 0-365, day year
	defineStructInstruction(StatRecord, GetFromDateToDate_D365Y, 60004, int, int, int, int);
}



//////////////////////////////////////////
//////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////
//////////////////////////////////////////

//BUILDINGTYPE
defineVariable(int, BUILDINGTYPE_CARGO_STATION);
defineVariable(int, BUILDINGTYPE_PASSANGER_STATION);
defineVariable(int, BUILDINGTYPE_LIVING);
defineVariable(int, BUILDINGTYPE_SHOP);
defineVariable(int, BUILDINGTYPE_SCHOOL);
defineVariable(int, BUILDINGTYPE_UNIVERSITY);
defineVariable(int, BUILDINGTYPE_MONUMENT);
defineVariable(int, BUILDINGTYPE_STORAGE);
defineVariable(int, BUILDINGTYPE_FACTORY);
defineVariable(int, BUILDINGTYPE_MINE);
defineVariable(int, BUILDINGTYPE_FIELD);
defineVariable(int, BUILDINGTYPE_FARM);
defineVariable(int, BUILDINGTYPE_KINDERGARTEN);
defineVariable(int, BUILDINGTYPE_ENGINE);
defineVariable(int, BUILDINGTYPE_CONSTRUCTION_OFFICE);
defineVariable(int, BUILDINGTYPE_CONSTRUCTION_OFFICE_RAIL);
defineVariable(int, BUILDINGTYPE_TEMP);
defineVariable(int, BUILDINGTYPE_ROADDEPO);
defineVariable(int, BUILDINGTYPE_RAILDEPO);
defineVariable(int, BUILDINGTYPE_POWERPLANT);
defineVariable(int, BUILDINGTYPE_SUBSTATION);
defineVariable(int, BUILDINGTYPE_TRANSFORMATOR);
defineVariable(int, BUILDINGTYPE_CUSTOMHOUSE);
defineVariable(int, BUILDINGTYPE_CHURCH);
defineVariable(int, BUILDINGTYPE_ELETRIC_EXPORT);
defineVariable(int, BUILDINGTYPE_ELETRIC_IMPORT);
defineVariable(int, BUILDINGTYPE_GAS_STATION);
defineVariable(int, BUILDINGTYPE_RAIL_TRAFO);
defineVariable(int, BUILDINGTYPE_POLLUTION_METER);
defineVariable(int, BUILDINGTYPE_BROADCAST);
defineVariable(int, BUILDINGTYPE_PARKING);
defineVariable(int, BUILDINGTYPE_KINO);
defineVariable(int, BUILDINGTYPE_PUB);
defineVariable(int, BUILDINGTYPE_SPORT);
defineVariable(int, BUILDINGTYPE_HOSPITAL);
defineVariable(int, BUILDINGTYPE_FIRESTATION);
defineVariable(int, BUILDINGTYPE_CITYHALL);
defineVariable(int, BUILDINGTYPE_PRODUCTION_LINE);
defineVariable(int, BUILDINGTYPE_CAR_DEALER);
defineVariable(int, BUILDINGTYPE_SHIP_DOCK);
defineVariable(int, BUILDINGTYPE_DISTRIBUTION_OFFICE);
defineVariable(int, BUILDINGTYPE_CONTAINER_FACILITY);
defineVariable(int, BUILDINGTYPE_FORKLIFT_GARAGE);
defineVariable(int, BUILDINGTYPE_AIRPLANE_GATE);
defineVariable(int, BUILDINGTYPE_AIRPLANE_PARKING);
defineVariable(int, BUILDINGTYPE_AIRPLANE_TOWER);
defineVariable(int, BUILDINGTYPE_COOLING_TOWER);
defineVariable(int, BUILDINGTYPE_HEATING_PLANT);
defineVariable(int, BUILDINGTYPE_HEATING_SUBSTATION);
defineVariable(int, BUILDINGTYPE_HEATING_SWITCH);
defineVariable(int, BUILDINGTYPE_POLICE_STATION);
defineVariable(int, BUILDINGTYPE_ORPHANAGE);
defineVariable(int, BUILDINGTYPE_COURT_HOUSE);
defineVariable(int, BUILDINGTYPE_PRISON);
defineVariable(int, BUILDINGTYPE_SECRET_POLICE);
defineVariable(int, BUILDINGTYPE_UNKNOWN);
defineVariable(int, BUILDINGTYPE_SNOWPLOW_OFFICE);
defineVariable(int, BUILDINGTYPE_HOTEL);
defineVariable(int, BUILDINGTYPE_ATTRACTION);
defineVariable(int, BUILDINGTYPE_PEDESTRIAN_BRIDGE);

//BUILDINGSUBTYPE
defineVariable(int, BUILDINGSUBTYPE_HOSTEL);
defineVariable(int, BUILDINGSUBTYPE_MEDICAL);
defineVariable(int, BUILDINGSUBTYPE_TECHNICAL);
defineVariable(int, BUILDINGSUBTYPE_SOVIET);
defineVariable(int, BUILDINGSUBTYPE_RADIO);
defineVariable(int, BUILDINGSUBTYPE_TELEVISION);
defineVariable(int, BUILDINGSUBTYPE_ROAD);
defineVariable(int, BUILDINGSUBTYPE_RAIL);
defineVariable(int, BUILDINGSUBTYPE_TROLLEYBUS);
defineVariable(int, BUILDINGSUBTYPE_SHIP);
defineVariable(int, BUILDINGSUBTYPE_SPACE_FOR_VEHICLES);
defineVariable(int, BUILDINGSUBTYPE_AIRCUSTOM);
defineVariable(int, BUILDINGSUBTYPE_CABLEWAY);
defineVariable(int, BUILDINGSUBTYPE_AIRPLANE);
defineVariable(int, BUILDINGSUBTYPE_RESTAURANT);
defineVariable(int, BUILDINGSUBTYPE_UNKNOWN);

//SOVIET_MINE_RESOURCE
defineVariable(int, SOVIET_MINE_RESOURCE_OIL);
defineVariable(int, SOVIET_MINE_RESOURCE_IRON);
defineVariable(int, SOVIET_MINE_RESOURCE_COAL);
defineVariable(int, SOVIET_MINE_RESOURCE_GRAVEL);
defineVariable(int, SOVIET_MINE_RESOURCE_WOOD);
defineVariable(int, SOVIET_MINE_RESOURCE_UNKNOWN);
defineVariable(int, SOVIET_MINE_RESOURCE_URANIUM);
defineVariable(int, SOVIET_MINE_RESOURCE_BAUXITE);



//VEHICLESKILL
defineVariable(int, VEHICLESKILL_HARVESTING);
defineVariable(int, VEHICLESKILL_SEEDING);
defineVariable(int, VEHICLESKILL_WOODCARRING);
defineVariable(int, VEHICLESKILL_GRAVELMINING);

defineVariable(int, VEHICLESKILL_CONSTRUCTION_CRANE);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_RAIL_CRANE);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_RAIL_TRACK_LAYER);

defineVariable(int, VEHICLESKILL_CONSTRUCTION_BULLDOZER);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_ASPHALT_LAYING);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_ROLLING);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_GROUNDWORKS);

defineVariable(int, VEHICLESKILL_AMBULANCE);
defineVariable(int, VEHICLESKILL_FIRETRUCK);
defineVariable(int, VEHICLESKILL_FIRELADDER);
defineVariable(int, VEHICLESKILL_PERSONAL);
defineVariable(int, VEHICLESKILL_FORKLIFT);
defineVariable(int, VEHICLESKILL_SNOWPLOW);
defineVariable(int, VEHICLESKILL_POLICE);
defineVariable(int, VEHICLESKILL_POLICEBUS);




//VEHICLETYPE
defineVariable(int, VEHICLETYPE_NOTSPECIFIED);
defineVariable(int, VEHICLETYPE_ROAD);
defineVariable(int, VEHICLETYPE_ROAD_SERVICE);
defineVariable(int, VEHICLETYPE_RAIL_VAGON);
defineVariable(int, VEHICLETYPE_RAIL_LOCOMOTIVE);
defineVariable(int, VEHICLETYPE_RAIL_SERVICE);
defineVariable(int, VEHICLETYPE_SHIP);
defineVariable(int, VEHICLETYPE_CABIN);
defineVariable(int, VEHICLETYPE_AIRPLANE);
defineVariable(int, VEHICLETYPE_CONTAINER);
defineVariable(int, VEHICLETYPE_HELICOPTER);
defineVariable(int, VEHICLETYPE_NUM);


//RESOURCE_TRANSPORT_TYPE
defineVariable(int, RESOURCE_TRANSPORT_COVERED);
defineVariable(int, RESOURCE_TRANSPORT_OPEN);
defineVariable(int, RESOURCE_TRANSPORT_GRAVEL);
defineVariable(int, RESOURCE_TRANSPORT_OIL);
defineVariable(int, RESOURCE_TRANSPORT_CEMENT);
defineVariable(int, RESOURCE_TRANSPORT_COOLER);
defineVariable(int, RESOURCE_TRANSPORT_LIVESTOCK);
defineVariable(int, RESOURCE_TRANSPORT_PASSANGER);
defineVariable(int, RESOURCE_TRANSPORT_CONCRETE);
defineVariable(int, RESOURCE_TRANSPORT_ELETRIC);
defineVariable(int, RESOURCE_TRANSPORT_VEHICLES);
defineVariable(int, RESOURCE_TRANSPORT_GENERAL);
defineVariable(int, RESOURCE_TRANSPORT_NUCLEAR1);
defineVariable(int, RESOURCE_TRANSPORT_NUCLEAR2);
defineVariable(int, RESOURCE_TRANSPORT_HEATING);
defineVariable(int, RESOURCE_TRANSPORT_NUM);

defineVariable(int, PERSON_STATUS_HAPPINESS);
defineVariable(int, PERSON_STATUS_FOOD);
defineVariable(int, PERSON_STATUS_HEALTH);
defineVariable(int, PERSON_STATUS_SOVIET);
defineVariable(int, PERSON_STATUS_ALCOHOL);
defineVariable(int, PERSON_STATUS_CULTURE);
defineVariable(int, PERSON_STATUS_SPORT);
defineVariable(int, PERSON_STATUS_RELIGION);
defineVariable(int, PERSON_STATUS_CLOTHING);
defineVariable(int, PERSON_STATUS_ELECTRONIC);
defineVariable(int, PERSON_STATUS_CRIME);


// if you want to use constants call this function at the start of your script
defineFunction(InitConstants, void)
{
	//BUILDINGTYPE
	BUILDINGTYPE_CARGO_STATION = 0;
	BUILDINGTYPE_PASSANGER_STATION = 1;

	BUILDINGTYPE_LIVING = 2; 
	BUILDINGTYPE_SHOP = 3;     
	BUILDINGTYPE_SCHOOL = 4;  
	BUILDINGTYPE_UNIVERSITY = 27;  
	BUILDINGTYPE_MONUMENT = 33;  

	BUILDINGTYPE_STORAGE = 5;  
	BUILDINGTYPE_FACTORY = 6;
	BUILDINGTYPE_MINE = 7;
	BUILDINGTYPE_FIELD = 8;
	BUILDINGTYPE_FARM = 9;
 
	BUILDINGTYPE_KINDERGARTEN = 10;  

	BUILDINGTYPE_ENGINE = 11;
	
	BUILDINGTYPE_CONSTRUCTION_OFFICE = 12;
	BUILDINGTYPE_CONSTRUCTION_OFFICE_RAIL = 28;
	
	BUILDINGTYPE_TEMP = 13;

	BUILDINGTYPE_ROADDEPO = 14;
	BUILDINGTYPE_RAILDEPO = 15;

	BUILDINGTYPE_POWERPLANT = 17;
	BUILDINGTYPE_SUBSTATION = 18;
	BUILDINGTYPE_TRANSFORMATOR = 19;

	BUILDINGTYPE_CUSTOMHOUSE = 20;
	BUILDINGTYPE_CHURCH = 21;
	
	BUILDINGTYPE_ELETRIC_EXPORT = 31;
	BUILDINGTYPE_ELETRIC_IMPORT = 32;
	
	BUILDINGTYPE_GAS_STATION = 34;  
	BUILDINGTYPE_RAIL_TRAFO = 35;  

	BUILDINGTYPE_POLLUTION_METER = 36;  

	BUILDINGTYPE_BROADCAST = 37;

	BUILDINGTYPE_PARKING = 38;

	BUILDINGTYPE_KINO = 22;
	BUILDINGTYPE_PUB = 23;
	BUILDINGTYPE_SPORT = 24;

	BUILDINGTYPE_HOSPITAL = 25;
	BUILDINGTYPE_FIRESTATION = 26;

	BUILDINGTYPE_CITYHALL = 39;

	BUILDINGTYPE_PRODUCTION_LINE = 40;
	BUILDINGTYPE_CAR_DEALER = 41;

	BUILDINGTYPE_SHIP_DOCK = 42;

	BUILDINGTYPE_DISTRIBUTION_OFFICE = 43;
	BUILDINGTYPE_CONTAINER_FACILITY = 44;

	BUILDINGTYPE_FORKLIFT_GARAGE = 45;

	BUILDINGTYPE_AIRPLANE_GATE = 46;
	BUILDINGTYPE_AIRPLANE_PARKING = 47;
	BUILDINGTYPE_AIRPLANE_TOWER = 48;
	
	BUILDINGTYPE_COOLING_TOWER = 60;

	BUILDINGTYPE_HEATING_PLANT = 70;
	BUILDINGTYPE_HEATING_SUBSTATION = 71;
	BUILDINGTYPE_HEATING_SWITCH = 72;

	BUILDINGTYPE_POLICE_STATION = 73;
	BUILDINGTYPE_ORPHANAGE = 74;
	BUILDINGTYPE_COURT_HOUSE = 75;
	BUILDINGTYPE_PRISON = 76;
	BUILDINGTYPE_SECRET_POLICE = 77;

	BUILDINGTYPE_UNKNOWN = 30;

	BUILDINGTYPE_SNOWPLOW_OFFICE = 49;

	BUILDINGTYPE_HOTEL = 50;
	BUILDINGTYPE_ATTRACTION = 51;

	BUILDINGTYPE_PEDESTRIAN_BRIDGE = 80;


	//BUILDINGSUBTYPE
	BUILDINGSUBTYPE_HOSTEL = 1;

	BUILDINGSUBTYPE_MEDICAL = 20;
	BUILDINGSUBTYPE_TECHNICAL = 21;
	BUILDINGSUBTYPE_SOVIET = 22;

	BUILDINGSUBTYPE_RADIO = 23;
	BUILDINGSUBTYPE_TELEVISION = 24;

	BUILDINGSUBTYPE_ROAD = 25;
	BUILDINGSUBTYPE_RAIL = 26;
	BUILDINGSUBTYPE_TROLLEYBUS = 27;
	BUILDINGSUBTYPE_SHIP = 19;

	BUILDINGSUBTYPE_SPACE_FOR_VEHICLES = 29;

	BUILDINGSUBTYPE_AIRCUSTOM = 31;

	BUILDINGSUBTYPE_CABLEWAY = 32;

	BUILDINGSUBTYPE_AIRPLANE = 33;

	BUILDINGSUBTYPE_RESTAURANT = 34;

	BUILDINGSUBTYPE_UNKNOWN = 30;




	//SOVIET_MINE_RESOURCE
	SOVIET_MINE_RESOURCE_OIL = 0;
	SOVIET_MINE_RESOURCE_IRON = 1;
	SOVIET_MINE_RESOURCE_COAL = 2;
	SOVIET_MINE_RESOURCE_GRAVEL = 3;   
	SOVIET_MINE_RESOURCE_WOOD = 4;  
	SOVIET_MINE_RESOURCE_UNKNOWN = 5;
	SOVIET_MINE_RESOURCE_URANIUM = 6;
	SOVIET_MINE_RESOURCE_BAUXITE = 7;
	
	
	
	
	//VEHICLESKILL
	VEHICLESKILL_HARVESTING = 0;
	VEHICLESKILL_SEEDING = 1;
	VEHICLESKILL_WOODCARRING = 2;
	VEHICLESKILL_GRAVELMINING = 3;
	VEHICLESKILL_CONSTRUCTION_CRANE = 21;
	VEHICLESKILL_CONSTRUCTION_RAIL_CRANE = 22;
	VEHICLESKILL_CONSTRUCTION_RAIL_TRACK_LAYER = 26;
	VEHICLESKILL_CONSTRUCTION_BULLDOZER = 23;
	VEHICLESKILL_CONSTRUCTION_ASPHALT_LAYING = 24;
	VEHICLESKILL_CONSTRUCTION_ROLLING = 25;
	VEHICLESKILL_CONSTRUCTION_GROUNDWORKS = 19;
	VEHICLESKILL_AMBULANCE = 30;
	VEHICLESKILL_FIRETRUCK = 31;
	VEHICLESKILL_FIRELADDER = 32;
	VEHICLESKILL_PERSONAL = 33;
	VEHICLESKILL_FORKLIFT = 34;
	VEHICLESKILL_SNOWPLOW = 35;
	VEHICLESKILL_POLICE = 36;
	VEHICLESKILL_POLICEBUS = 37;
	
	
	
	//VEHICLETYPE
	VEHICLETYPE_NOTSPECIFIED = 0;
	VEHICLETYPE_ROAD = 1;
	VEHICLETYPE_ROAD_SERVICE = 2;
	VEHICLETYPE_RAIL_VAGON = 3;
	VEHICLETYPE_RAIL_LOCOMOTIVE = 4;
	VEHICLETYPE_RAIL_SERVICE = 5;
	VEHICLETYPE_SHIP = 6;
	VEHICLETYPE_CABIN = 7;
	VEHICLETYPE_AIRPLANE = 8;
	VEHICLETYPE_CONTAINER = 9;
	VEHICLETYPE_HELICOPTER = 10;
	VEHICLETYPE_NUM = 11;
	
	
	
	//RESOURCE_TRANSPORT_TYPE
	RESOURCE_TRANSPORT_COVERED = 0;
	RESOURCE_TRANSPORT_OPEN = 1;
	RESOURCE_TRANSPORT_GRAVEL = 2;
	RESOURCE_TRANSPORT_OIL = 3;
	RESOURCE_TRANSPORT_CEMENT = 4;
	RESOURCE_TRANSPORT_COOLER = 5;
	RESOURCE_TRANSPORT_LIVESTOCK = 6;
	RESOURCE_TRANSPORT_PASSANGER = 7;
	RESOURCE_TRANSPORT_CONCRETE = 8;
	RESOURCE_TRANSPORT_ELETRIC = 9;
	RESOURCE_TRANSPORT_VEHICLES = 10;
	RESOURCE_TRANSPORT_GENERAL = 11;
	RESOURCE_TRANSPORT_NUCLEAR1 = 12;
	RESOURCE_TRANSPORT_NUCLEAR2 = 13;
	RESOURCE_TRANSPORT_HEATING = 14;
	RESOURCE_TRANSPORT_NUM = 15;
	
	
	PERSON_STATUS_HAPPINESS = 0;
	PERSON_STATUS_FOOD = 1;
	PERSON_STATUS_HEALTH = 2;
	PERSON_STATUS_SOVIET = 3;
	PERSON_STATUS_ALCOHOL = 4;
	PERSON_STATUS_CULTURE = 5;
	PERSON_STATUS_SPORT = 6;
	PERSON_STATUS_RELIGION = 7;
	PERSON_STATUS_CLOTHING = 8;
	PERSON_STATUS_ELECTRONIC = 9;
	PERSON_STATUS_CRIME = 10;
	
	
	returnVoid();
}